
using Shadowsocks
using Test

true && begin # Poly1305
msg = unsafe_wrap(Array{UInt8}, pointer("Cryptographic Forum Research Group"), 34)
key = [0x85; 0xd6; 0xbe; 0x78; 0x57; 0x55; 0x6d; 0x33; 
    0x7f; 0x44; 0x52; 0xfe; 0x42; 0xd5; 0x06; 0xa8; 
    0x01; 0x03; 0x80; 0x8a; 0xfb; 0x0d; 0xb2; 0xfd; 
    0x4a; 0xbf; 0xf6; 0xaf; 0x41; 0x49; 0xf5; 0x1b]
@test Shadowsocks.Crypto.Poly1305.Poly1305MAC(msg, key) == [0xa8; 0x06; 0x1d; 0xc1; 0x30; 0x51; 0x36; 0xc6; 0xc2; 0x2b; 0x8b; 0xaf; 0x0c; 0x01; 0x27; 0xa9]
end # end of test Poly1305

false && begin # Salsa20, XSalsa20
k = zeros(UInt8, 32)
n = zeros(UInt8, 8)
c = zeros(UInt8, 5)
m = b"julia"[:]

Shadowsocks.Crypto.Salsa20.Salsa20Encrypt(c, k, n, m)
@test c[1:5] == UInt8[0xf0, 0xe2, 0x9a, 0x32, 0xfa]

# Salsa20
m = Array{UInt8}("This is a piece of message")
k = zeros(UInt8, 32)
n = zeros(UInt8, 8)
c = zeros(UInt8, length(m))

Shadowsocks.Crypto.Salsa20.Salsa20Encrypt(c, k, n, m)
@test c == UInt8[0xce, 0xff, 0x9f, 0x28, 0xbb, 0x25, 0x01, 0x3b, 0xf7, 0x2a, 0x17, 0x48, 0x20, 0x9f, 0xcd, 0xf4, 0x8c, 0x48, 0x47, 0x94, 0x74, 0x6d, 0xda, 0x18, 0xa9, 0xf9]

k = zeros(UInt8, 32)
n = zeros(UInt8, 24)
c = zeros(UInt8, 5)
m = b"julia"[:]
Shadowsocks.Crypto.Salsa20.XSalsa20Encrypt(c, k, n, m)
@test c[:] == UInt8[0xd0, 0x1b, 0x4a, 0xb6, 0x2a]

# XSalsa20
m = Array{UInt8}("This is a piece of message")
k = zeros(UInt8, 32)
n = zeros(UInt8, 24)
c = zeros(UInt8, length(m))

Shadowsocks.Crypto.Salsa20.XSalsa20Encrypt(c, k, n, m)
@test c == UInt8[0xee, 0x06, 0x4f, 0xac, 0x6b, 0x47, 0xd1, 0xef, 0x05, 0xf2, 0xa3, 0x0a, 0x03, 0x40, 0xd0, 0xd4, 0x33, 0xe0, 0x16, 0xb4, 0xfc, 0xfe, 0x6a, 0x2c, 0x07, 0x3f]
end

false && begin # Original Chacha20, XChacha20
k = zeros(UInt8, 32)
n = zeros(UInt8, 8)
c = zeros(UInt8, 5)
m = b"julia"[:]

Shadowsocks.Crypto.Chacha20.OChacha20Encrypt(c, k, n, m)
@test c[:] == UInt8[0x1c, 0xcd, 0x8c, 0xc4, 0xc1]

# Chacha20
m = Array{UInt8}("This is a piece of message")
k = zeros(UInt8, 32)
n = zeros(UInt8, 8)
c = zeros(UInt8, length(m))

Shadowsocks.Crypto.Chacha20.OChacha20Encrypt(c, k, n, m)
@test c == UInt8[0x22, 0xd0, 0x89, 0xde, 0x80, 0x98, 0x4e, 0xb0, 0x21, 0x7d, 0x1a, 0x8c, 0x36, 0xe5, 0xd8, 0x08, 0xd2, 0xb4, 0x39, 0xd5, 0xc5, 0xfe, 0x9e, 0x7b, 0xcf, 0x53]

# ChaCha20_IETF
m = Array{UInt8}("This is a piece of message")
k = zeros(UInt8, 32)
n = zeros(UInt8, 12)
c = zeros(UInt8, length(m))

Shadowsocks.Crypto.Chacha20.Chacha20Encrypt(c, k, n, m)
@test c == UInt8[0x22, 0xd0, 0x89, 0xde, 0x80, 0x98, 0x4e, 0xb0, 0x21, 0x7d, 0x1a, 0x8c, 0x36, 0xe5, 0xd8, 0x08, 0xd2, 0xb4, 0x39, 0xd5, 0xc5, 0xfe, 0x9e, 0x7b, 0xcf, 0x53]

# XChaCha20
m = Array{UInt8}("This is a piece of message")
k = zeros(UInt8, 32)
n = zeros(UInt8, 24)
c = zeros(UInt8, length(m))

Shadowsocks.Crypto.Chacha20.XChacha20Encrypt(c, k, n, m)
@test c == UInt8[0xe8, 0xb8, 0x43, 0x6b, 0x9f, 0x56, 0x72, 0xf1, 0xf3, 0xb2, 0xae, 0x59, 0xc2, 0xcb, 0x98, 0x8c, 0xcb, 0xd0, 0x7e, 0x3d, 0xc3, 0x73, 0x5f, 0xa6, 0x4b, 0xb3]

k = zeros(UInt8, 32)
n = zeros(UInt8, 24)
c = zeros(UInt8, 5)
m = b"julia"[:]
Shadowsocks.Crypto.Chacha20.XChacha20Encrypt(c, k, n, m)
@test c[:] == UInt8[0xd6, 0xa5, 0x46, 0x71, 0xde]
end

false && begin # Chacha20_Poly1305
m = Array{UInt8}("This is a piece of message")
k = zeros(UInt8, 32)
n = zeros(UInt8, 8)
c = zeros(UInt8, length(m)+16)
add = Array{UInt8}("123456")

Shadowsocks.Crypto.Chacha20_Poly1305.Encrypt(c, k, n, m, add) # not passed
@test c == UInt8[0xcb, 0x6f, 0x8e, 0xcd, 0x75, 0x38, 0x4b, 0x5a, 0xf9, 0x9a, 0xe7, 0x15, 0x16, 0x4e, 0x6d, 0x2d, 0xa4, 0x69, 0x09, 0xcd, 0x2d, 0x90, 0x16, 0x08, 0x75, 0xa3, 0x40, 0x6d, 0x7f, 0xa4, 0x2f, 0xa9, 0xf5, 0xdf, 0x86, 0xb3, 0x4b, 0xa0, 0xdc, 0xd6, 0x4f, 0xcf]
end

false && begin # ChaCha20_Poly1305_IETF
m = Array{UInt8}("This is a piece of message")
k = zeros(UInt8, 32)
n = zeros(UInt8, 12)
c = zeros(UInt8, length(m)+16)
add = Array{UInt8}("123456")

Shadowsocks.Crypto.Chacha20_Poly1305_IETF.Encrypt(c, k, n, m, add)
@test c == UInt8[0xcb, 0x6f, 0x8e, 0xcd, 0x75, 0x38, 0x4b, 0x5a, 0xf9, 0x9a, 0xe7, 0x15, 0x16, 0x4e, 0x6d, 0x2d, 0xa4, 0x69, 0x09, 0xcd, 0x2d, 0x90, 0x16, 0x08, 0x75, 0xa3, 0xda, 0x7b, 0xbf, 0x70, 0x9d, 0x44, 0x2f, 0xbf, 0xd3, 0xe1, 0x24, 0xf1, 0xd5, 0x19, 0xe5, 0x3d]
end

false && begin # XChacha20_Poly1305_IETF
m = Array{UInt8}("This is a piece of message")
k = zeros(UInt8, 32)
n = zeros(UInt8, 24)
c = zeros(UInt8, length(m)+16)
add = Array{UInt8}("123456")

Shadowsocks.Crypto.XChacha20_Poly1305_IETF.Encrypt(c, k, n, m, add)
@test c == UInt8[0x2c, 0xf6, 0xff, 0xfa, 0xc5, 0x49, 0xfe, 0x5f, 0xb8, 0xc1, 0x83, 0xac, 0xd0, 0x57, 0x7a, 0x68, 0x80, 0x7e, 0x81, 0x53, 0x24, 0xfa, 0xeb, 0xcc, 0xbd, 0xb8, 0x04, 0x5c, 0xd6, 0x9d, 0x26, 0x09, 0x1a, 0x7f, 0xc8, 0x92, 0xaa, 0xd9, 0x5b, 0x70, 0x70, 0x31]
end

false && begin 
text = unsafe_wrap(Array{UInt8}, pointer("julia00001111222233334444"), 25)
c = zeros(UInt8, 1024)
clen = Ref{UInt64}(0)
m = text
mlen = UInt64(length(m))
ad = unsafe_wrap(Array{UInt8}, pointer("imgk0000"), 8)
adlen = UInt64(length(ad))
nsec = C_NULL

key = rand(UInt8, 32)
nonce = rand(UInt8, 12)
Shadowsocks.crypto_aead_chacha20poly1305_ietf_encrypt(c, clen, m, mlen, ad, adlen, nsec, nonce, key)

ciphertext = r1
c = ciphertext
clen = UInt64(length(c))
m = zeros(UInt8, 1024)
mlen = Ref{UInt64}(0)
ad = unsafe_wrap(Array{UInt8}, pointer("imgk0000"), 8)
adlen = UInt64(length(ad))
nsec = C_NULL

Shadowsocks.crypto_aead_chacha20poly1305_ietf_decrypt(m, mlen, nsec, c, clen, ad, adlen, nonce, key)

ssConn = Shadowsocks.SSConnection(
	connect("www.baidu.com", 80),
	Shadowsocks.Cipher(Shadowsocks.SSServer()),
	rand(UInt8, 12),
	rand(UInt8, 12),
	rand(UInt8, 18),
	rand(UInt8, 32),
	rand(UInt8, 32)
)

buff = zeros(UInt8, 1024);
buff2 = zeros(UInt8, 1024);

Shadowsocks.encrypt(buff, unsafe_wrap(Array{UInt8}, pointer("julia"), 5), 5, ssConn)
end
